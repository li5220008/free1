package bussiness;

import business.LogInfosService;
import business.StrategyBaseService;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.gson.Gson;
import com.google.gson.JsonObject;
import dbutils.QicDbUtil;
import dbutils.QsmDbUtil;
import dbutils.SqlLoader;
import dto.StrategyDownTaskContextDto;
import dto.StrategyPar;
import dto.UserStrategyOrderDto;
import models.common.*;
import org.apache.commons.lang.StringUtils;
import play.libs.F;
import util.MessageBuilder;
import util.Page;
import util.SystemLoggerMessage;

import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * 策略列表的业务方法.
 * User: liangbing
 * Date: 12-12-10
 * Time: 下午2:19
 * 根据条件查询策略列表
 */
public class StrategyService extends StrategyBaseService {

    /**
     * 查询待上架策略
     *
     * @param sp     参数类
     * @param pageNo 当前页
     * @return _1. 待上架策略对象集合, _2 Page 分页对象
     */
    public static F.T2<List<StrategyDto>, Page> waitList(StrategyPar sp, int pageNo,long uid) {
        String sqlList = SqlLoader.getSqlById("StrategyGroundingRetrieve");
        sqlList +=" and status in (1,2,3,6,8) and sb.stup_uid="+uid+" ";

        if(sp.tradeType!=0){
            sqlList += " AND sb.`trade_type` ="+ sp.tradeType+" ";
        }
        if(sp.tradeVariety!=0){
            sqlList+= " AND sb.`trade_variety` ="+sp.tradeVariety+" ";
        }
        if(sp.status!=0){
            sqlList+= " AND sb.`status`="+sp.status+" ";
        }
        if(sp.strategyLanguage!=0){
            sqlList+= " AND sb.enginetype_id="+sp.strategyLanguage+" ";
        }
        if (StringUtils.isNotBlank(sp.keyWords)) {
            sqlList += " and (sb.`name` LIKE '%" + sp.keyWords + "%' OR sb.`provider` LIKE '%" + sp.keyWords + "%')  ";
        }
        sqlList+=" GROUP BY id ";
        List<StrategyDto> audList = null;

        System.out.println("梁兵"+sqlList);
        StringBuilder coutSql = new StringBuilder("select count(*) from (\n" + sqlList + "\n) distTable  \n");
        Long total = QicDbUtil.queryQicDbCount(coutSql.toString());
        if (StringUtils.isNotBlank(sp.orderSort)) {
            if (sp.orderFlag == 0)
                sqlList += " ORDER BY " + sp.orderSort + " asc ";
            else
                sqlList += " ORDER BY " + sp.orderSort + " desc ";

        }
        Page page = new Page(total.intValue(), pageNo);
        sqlList += " limit " + page.beginIndex + "," + page.pageSize + "\n";
        if (total > 0) {
            audList = QicDbUtil.queryQicDBBeanList(sqlList, StrategyDto.class);
        }
        return F.T2(audList, page);
    }
    private static List<StrategyDto> wrapQiaStrategyData(List<StrategyDto> list){
        if(list != null && list.size()>0){
            List<Long> stids = Lists.newArrayList();
            Map<String,StrategyDto> map = Maps.newHashMap();
            for(StrategyDto strategyDto : list){
                map.put(String.valueOf(strategyDto.id),strategyDto);
                if(strategyDto.enginetypeId == StrategyDto.QIA_ENGINEE_ID)
                stids.add(strategyDto.id);
            }
            List<QiaStrategyDto> qiaStrategyDtoList =findQiaStrategyByStrategyIds(stids);
            for(QiaStrategyDto qiaStrategyDto : qiaStrategyDtoList){
                StrategyDto dto = map.get(qiaStrategyDto.strategyId);
                map.get(qiaStrategyDto.strategyId).qiaStrategyDto = qiaStrategyDto;
            }
        }
        return list;
    }
    /**
     * 策略回收站列表
     *
     * @param sp     参数类
     * @param pageNo 当前页
     * @return _1. 策略回收站对象集合, _2 Page 分页对象
     */
    public static F.T2<List<StrategyDto>, Page> retrieveList(StrategyPar sp, int pageNo,long uid) {
        String sqlList = SqlLoader.getSqlById("StrategyGroundingRetrieve");
        sqlList +=" and status in(?,?) and sb.stup_uid="+uid+" ";

        if(sp.tradeType!=0){
            sqlList += " AND sb.`trade_type` ="+ sp.tradeType+" ";
        }
        if(sp.tradeVariety!=0){
            sqlList+= " AND sb.`trade_variety` ="+sp.tradeVariety+" ";
        }
        if(sp.status!=0){
            sqlList+= " AND sb.`status`="+sp.status+" ";
        }
        if(sp.strategyLanguage!=0){
            sqlList+=" AND sb.`enginetype_id` ="+sp.strategyLanguage+" ";
        }

        if (StringUtils.isNotBlank(sp.keyWords)) {
            sqlList += " and (sb.`name` LIKE '%" + sp.keyWords + "%' OR sb.`provider` LIKE '%" + sp.keyWords + "%')  ";
        }
        sqlList+=" GROUP BY id ";
        List<StrategyDto> audList = null;
        StringBuilder coutSql = new StringBuilder("select count(*) from (\n" + sqlList + "\n) distTable  \n");
        Long total = QicDbUtil.queryQicDbCount(coutSql.toString(), StrategyDto.StrategyStatus.DOWNSHELF.value, StrategyDto.StrategyStatus.DELETED.value);
        if (StringUtils.isNotBlank(sp.orderSort)) {
            if (sp.orderFlag == 0)
                sqlList += " ORDER BY " + sp.orderSort + " asc ";
            else
                sqlList += " ORDER BY " + sp.orderSort + " desc ";

        }
        Page page = new Page(total.intValue(), pageNo);
        sqlList += " limit " + page.beginIndex + "," + page.pageSize + "\n";
        if (total > 0) {
            audList = QicDbUtil.queryQicDBBeanList(sqlList, StrategyDto.class, StrategyDto.StrategyStatus.DOWNSHELF.value, StrategyDto.StrategyStatus.DELETED.value);
        }
         return F.T2(audList, page);
    }

    /**
     * 上架策略列表
     *
     * @param sp     参数类
     * @param pageNo 当前页
     * @return _1. 策略列表对象集合, _2 Page 分页对象
     */
    public static F.T2<List<StrategyDto>, Page> groundingList(StrategyPar sp, int pageNo,long uid) {
        String sqlList = SqlLoader.getSqlById("StrategySql");
        sqlList +=" and status in (?,?) and sb.stup_uid in("+uid+",-1000) ";

        if (StringUtils.isNotBlank(sp.keyWords)) {
            sqlList += " and (sb.`name` LIKE '%" + sp.keyWords + "%' OR sb.`provider` LIKE '%" + sp.keyWords + "%')  ";
        }

        if(sp.tradeType!=0){
            sqlList += " AND sb.`trade_type` ="+ sp.tradeType+" ";
        }
        if(sp.tradeVariety!=0){
           sqlList+= " AND sb.`trade_variety` ="+sp.tradeVariety+" ";
        }
        if(sp.strategyLanguage!=0){
            sqlList+=" AND sb.`enginetype_id` ="+sp.strategyLanguage+" ";
        }
        sqlList+=" GROUP BY id ";
        List<StrategyDto> audList = null;
        StringBuilder coutSql = new StringBuilder("select count(*) from (\n" + sqlList + "\n) distTable  \n");
        Long total = QicDbUtil.queryQicDbCount(coutSql.toString(), StrategyDto.StrategyStatus.UPSHELF.value, StrategyDto.StrategyStatus.WAITINGUPSHELF.value);
        if (StringUtils.isNotBlank(sp.orderSort)) {
            if (sp.orderFlag == 0)
                sqlList += " ORDER BY " + sp.orderSort + " asc ";
            else
                sqlList += " ORDER BY " + sp.orderSort + " desc ";

        }
        Page page = new Page(total.intValue(), pageNo);
        sqlList += " limit " + page.beginIndex + "," + page.pageSize + "\n";
        if (total > 0) {
            audList = QicDbUtil.queryQicDBBeanList(sqlList, StrategyDto.class, StrategyDto.StrategyStatus.UPSHELF.value, StrategyDto.StrategyStatus.WAITINGUPSHELF.value);
        }
         return F.T2(audList, page);
    }

    /**
     * author 潘志威
     * 加入回测
     * @param ids
     */
    @Deprecated
    public static void addLookback(String ids[],int status){

        String sql = "UPDATE qic_db.`strategy_baseinfo` a SET a.`status` = ?, a.`pass_time` = NOW() WHERE a.`id` IN (";
        for(int i = 0; i < ids.length; i ++){
            if(i == ids.length - 1){
                sql += ids[i];
            }
            else{
                sql += ids[i] + ",";
            }
        }
        sql += ")";
        QicDbUtil.updateQicDB(sql, status);

    }

    /**
     * author 潘志威
     * 删除策略
     * @param ids
     */
    public static void delstrategy(String ids[]){
        String sql = SqlLoader.getSqlById("delStrategy");
        Object[][] params = new Object[ids.length][2];
        for (int i = 0; i < ids.length; i ++) {
            params [i][0] = StrategyDto.StrategyStatus.DELETED.value;
            params [i][1] = ids[i];
        }
        QicDbUtil.batchQicDB(sql, params);
    }

    /**
     * author 潘志威
     * 策略清空
     */
    public static void emptystrategy(){
        String sql = SqlLoader.getSqlById("emptyStrategy");
        QicDbUtil.updateQicDB(sql);
    }
    /**
     *
     * 处理 立即下架/延时下架
     *
     * 立即下架包括两个步骤
     * 1.如果当前时间大于最大收藏时间--》策略下架
     * 2.把每条下架信息保存到user_message表
     *
     * 延时下架 把相关信息存入任务调度表（scheduling_task）由定时任务类处理
     * @author 刘泓江
     * @param stId  策略id数组
     * @param setTime 用户设置的 延时下架时间
     * @param flag 客户端传过来的标示 1 ：立即下架 2 ：延时下架
     * @return 6.设置时间小于当前时间 5.策略为待下架状态不允许修改，4.模板内容非法 3.非法操作 2.策略当前有用户订阅，不能下架 1.下架成功
     */
    public static int strategyDown(String stId,Date setTime,String message,long uid,int flag){
        Date currentTime = new Date();
        StrategyDownTaskContextDto tastContext = new StrategyDownTaskContextDto();
        if (stId ==null) {
            return 3;//3.非法操作
        }
        String[] stIds = stId.split(",");
        tastContext.strategyIdArray = stIds;
        tastContext.messageTemplate = message;
        String StrategyDownSql = SqlLoader.getSqlById("StrDown");
        String maxOrderTimeSql = SqlLoader.getSqlById("maxOrderTime");
        String getOrderedUserSql = SqlLoader.getSqlById("getOrderedUser");
        String sendUserMessageSql = SqlLoader.getSqlById("sendUserMassage");
        String queryStraStatusSql = SqlLoader.getSqlById("queryStraStatus");
        Gson gson = new Gson();
        String strIdGroup = gson.toJson(stIds).replace("[", "").replace("]", "");
        String sql = maxOrderTimeSql.replaceAll("#strIdGroup#", strIdGroup);
        UserStrategyOrderDto userStrategyOrder = QicDbUtil.queryQicDBSingleBean(sql, UserStrategyOrderDto.class);
        //5.策略为待下架状态不允许修改
        for( String id :stIds){
            StrategyDto strategyDto = QicDbUtil.queryQicDBSingleBean(queryStraStatusSql, StrategyDto.class, id);
            if(strategyDto==null||strategyDto.status== StrategyDto.StrategyStatus.WAITINGUPSHELF.value){
                return 5;//5.策略为待下架状态不允许修改
            }
        }
        if(flag == 2){//处理延时下架
            if (setTime == null ||setTime.before(currentTime) ) {
                return 6;//6.设置时间小于当前时间
            }
            if (setTime.before(userStrategyOrder.orderTime)) {//设定时间 比 所有已订阅用户最大收藏时间小。
                return 2;//2.策略当前有用户订阅，不能下架
            }
            StraDownDelayed(stIds,tastContext,StrategyDownSql,setTime,currentTime,getOrderedUserSql,sendUserMessageSql,message);
            LogInfosService.writeSystemLog(uid, SystemLoggerMessage.DO_STR_DOWN, SystemLoggerMessage.STR_DOWN_DELAY, SystemLoggerMessage.TYPE);//写入系统日志
        }else if(flag ==1){ //处理立即下架
            if (currentTime.before(userStrategyOrder.orderTime)) {//设定时间 比 所有已订阅用户最大收藏时间小。
                return 2;//2.策略当前有用户订阅，不能下架
            }
            for (int i = 0; i < stIds.length; i++) {
                //设置策略状态为已下架
                QicDbUtil.updateQicDB(StrategyDownSql, setTime, StrategyDto.StrategyStatus.DOWNSHELF.value, Long.parseLong(stIds[i]));
                deleteStrategyFromQsm(stIds);
            }
                LogInfosService.writeSystemLog(uid, SystemLoggerMessage.DO_STR_DOWN, SystemLoggerMessage.STR_DOWN_PROMPTLY, SystemLoggerMessage.TYPE);//写入系统日志

        }else{
            return 3;//3.非法请求
        }
        return 1;//1.下架成功
    }

    /**
     * author 潘志威
     * 策略上架
     * @param ids
     * @param serverId qsm中的agentIP
     */
    public static boolean upstrategy(String ids[],Map<String,Integer> serverId){
        List<StrategyBaseinfo> strategyList = findStrategysByIds(ids);
        List<StrategyBaseinfo> qicoreStrategy = Lists.newArrayList();
        List<StrategyBaseinfo> qiaStrategy = Lists.newArrayList();
        for(StrategyBaseinfo strategyBaseinfo : strategyList){
            if(strategyBaseinfo.status != StrategyDto.StrategyStatus.FINISHTEST.value){
                return false;
            }
            if(strategyBaseinfo.enginetypeId == StrategyDto.QICORE_ENGINEE_ID){
                qicoreStrategy.add(strategyBaseinfo);
            }
            if(strategyBaseinfo.enginetypeId == StrategyDto.QIA_ENGINEE_ID){
                qiaStrategy.add(strategyBaseinfo);
            }
        }
        String sql = SqlLoader.getSqlById("upShelfStrategy");
        Object[][] params = new Object[ids.length][3];
        int index = 0;
        for (StrategyBaseinfo strategyBaseinfo : strategyList){
            params [index][0] = StrategyDto.StrategyStatus.UPSHELF.value;
            params[index][1] = strategyBaseinfo.enginetypeId ==  StrategyBaseinfo.QICORE_ENGINEE_ID ?serverId.get("qicore"):serverId.get("qiaSimulate");
            params [index][2] = strategyBaseinfo.id;
            ++index;
        }
           QicDbUtil.batchQicDB(sql, params);
        //同步数据到qsm个
        //写到qsm库中
        if(qicoreStrategy.size()>0){
            updateAgentIpWhenUpShelf(qicoreStrategy,serverId.get("qicore"));
        }
        if(qiaStrategy.size()>0){
            updateAgentIpWhenUpShelf(qiaStrategy,serverId.get("qia"));
        }
        return true;
    }
    private static void updateAgentIpWhenUpShelf(List<StrategyBaseinfo> list,int serverId){
        String sql = SqlLoader.getSqlById("updateServerIpWhenUpShelf");
        Object[][] params = new Object[list.size()][2];
        for(int row = 0;row<list.size();row++){
            params[row][0] = String.valueOf(serverId);
            params[row][1] = list.get(row).stUuid;
        }
        QicDbUtil.batch(sql,params);
    }
    public static boolean deleteStrategyFromQsm(String[] ids){
        List<StrategyBaseinfo> strategyBaseinfoList =findStrategysByIds(ids);
        if(strategyBaseinfoList== null ||strategyBaseinfoList.size() == 0){
            return false;
        }else {
            String qsmSql = SqlLoader.getSqlById("deleteStrategyFromQsm");
            Object[][] params = new Object[strategyBaseinfoList.size()][1];
            for(int row = 0;row<strategyBaseinfoList.size();row++){
                params[row][0] = strategyBaseinfoList.get(row).stUuid;
            }
            QsmDbUtil.batchQsmDB(qsmSql, params);
        }
        return true;
    }


   public static int  syncBackTestResult(StrategyDto strategyDto){
       String sql = SqlLoader.getSqlById("syncBackTestResult");
       return QicDbUtil.updateQicDB(sql,
               strategyDto.id,
               strategyDto.retainedProfits,
               strategyDto.grossProfit,
               strategyDto.overallProfitability,
               strategyDto.overallDeficit,
               strategyDto.canhsiedRatio,
               strategyDto.tradeCount,
               strategyDto.longPositionTradeCount,
               strategyDto.shortPositionTradeCount,
               strategyDto.profitRatio,
               strategyDto.profitCount,
               strategyDto.deficitCount,
               strategyDto.positionCloseCount,
               strategyDto.maxSingleProfit,
               strategyDto.maxSingleDeficit,
               strategyDto.maxSingleProfitRatio,
               strategyDto.maxSingleDeficitRatio,
               strategyDto.profitLossRatio,
               strategyDto.sumOfCommission,
               strategyDto.yield,
               strategyDto.avgProfitOfMonth,
               strategyDto.floatingProfitAndLoss,
               strategyDto.totalAsset,
               strategyDto.yieldOfMonth,
               strategyDto.yieldOfYear,
               strategyDto.maxSequentialDeficitCapital,
               strategyDto.lastSequentialDeficitCapital,
               strategyDto.maxSequentialProfitCount,
               strategyDto.lastSequentialProfitCount,
               strategyDto.maxSequentialDeficitCount,
               strategyDto.lastSequentialDeficitCount,
               strategyDto.tradeDays,
               strategyDto.maxShortPositionTime,
               strategyDto.yieldOfMonthStandardDeviation,
               strategyDto.sharpeIndex,
               strategyDto.movingCost);
   }
    public static int  syncQiaBackTestResult(JsonObject jo){
        String sql = SqlLoader.getSqlById("syncQiaBackTestResult");
        return QicDbUtil.updateQicDB(sql,
                jo.get("id").getAsInt(),
                1,//回验期数据
                jo.get("sharpRatio").getAsDouble(),
                jo.get("volatility").getAsDouble(),
                jo.get("beta").getAsDouble(),
                jo.get("averageSimpleRateOfReturn,").getAsDouble(),
                jo.get("calmarRatio").getAsDouble(),
                jo.get("conditionalSharpRatio").getAsDouble(),
                jo.get("excessReturnOnVar").getAsDouble(),
                jo.get("highterPartialMoments").getAsDouble(),
                jo.get("jensenRatio").getAsDouble(),
                jo.get("kappa3").getAsDouble(),
                jo.get("conditionalVar").getAsDouble(),
                jo.get("lowerPartialMoments").getAsDouble(),
                jo.get("maximumDrawdown").getAsDouble(),
                jo.get("modifiedSharpRatio").getAsDouble(),
                jo.get("maxSingleDeficitRatio").getAsDouble(),
                jo.get("mvar").getAsDouble(),
                jo.get("omega").getAsDouble(),
                jo.get("sortinoRatio").getAsDouble(),
                jo.get("treynorRatio").getAsDouble(),
                jo.get("upsidePotentialRatio").getAsDouble(),
                jo.get("var").getAsDouble(),
                jo.get("skewness").getAsDouble(),
                jo.get("kurtosis").getAsDouble(),
                jo.get("corrWithMarket").getAsDouble(),
                jo.get("hitRate").getAsDouble(),
                jo.get("cumsumSimpleReturn").getAsDouble());
    }
    public static int updateStategyStatus(StrategyDto.StrategyStatus status,String suuid){
        String sql = SqlLoader.getSqlById("updateStategyStatus");
       return  QicDbUtil.updateQicDB(sql, status.value, suuid);
    }
    public static int updateStategyStatusbyId(StrategyDto.StrategyStatus status,String id){
        String sql = SqlLoader.getSqlById("updateStategyStatusbyId");
       return  QicDbUtil.updateQicDB(sql, status.value, id);
    }
    // 策略延时下架
    public static int StraDownDelayed(String[] stIds, StrategyDownTaskContextDto tastContext, String StrategyDownSql,
                        Date setTime,Date currentTime,String getOrderedUserSql,String sendUserMessageSql,
                        String message){
        currentTime.setHours(24);
        currentTime.setMinutes(0);
        currentTime.setSeconds(0);
        final Long SPACING_INTERVAL =7*24*60*60*1000L;//间隔时间
        String setScdulingTaskSql = SqlLoader.getSqlById("setScdulingTaskInfo");
        for (int i = 0; i < stIds.length; i++) {
            //设置策略状态为待下架
            QicDbUtil.updateQicDB(StrategyDownSql, setTime, StrategyDto.StrategyStatus.WAITINGUPSHELF.value, Long.parseLong(stIds[i]));
        }
        Gson gson = new Gson();
        String contextJsonString = gson.toJson(tastContext);
        if(setTime.getTime()-currentTime.getTime()<=SPACING_INTERVAL){//设置时间-当前时间小于7天 马上发下架通知给用户表
            Date orderDate = new Date(setTime.getTime()-SPACING_INTERVAL);
                for (int i = 0; i < stIds.length; i++) {
                    try {
                        List<UserStrategyOrderDto> list = QicDbUtil.queryQicDBBeanList(getOrderedUserSql, UserStrategyOrderDto.class, Long.parseLong(stIds[i]), orderDate);
                        StrategyBaseinfo strategy = findStrategyById(Long.parseLong(stIds[i]));//组装用户消息
                        MessageBuilder messageBuilder = new MessageBuilder(message);
                        messageBuilder.addParameter("strategy", strategy);//下架通知模板 【$strategy.name】
                        String  inputVal = messageBuilder.execute();
                        for (UserStrategyOrderDto userStrategyOrderDto : list) {
                            QicDbUtil.updateQicDB(sendUserMessageSql, userStrategyOrderDto.uid, inputVal);
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            QicDbUtil.updateQicDB(setScdulingTaskSql, contextJsonString, setTime, "StrategyDownTaskRunner");
        }else{//设置时间-当前时间大于7天
            Date beforeDate = new Date(setTime.getTime()-SPACING_INTERVAL);
            QicDbUtil.updateQicDB(setScdulingTaskSql, contextJsonString, beforeDate, "StrategyDownTaskRunner");//提前7天通知用户
            QicDbUtil.updateQicDB(setScdulingTaskSql, contextJsonString, setTime, "StrategyDownTaskRunner");//在设定日期再次通知用户
        }
        return 1;
    }

   public static int  deleteStrategyFromPerformance(String strUUID,StrategyDto.StrategyType strategyType ){
       String sql = SqlLoader.getSqlById("deleteStrategyFromPerformance");
        String tableName = "";
       switch (strategyType){
           case QICORE:
               tableName = "strategy_performance_qicore";
               break;
           case QIA:
                   tableName = "strategy_performance_qia";
                break;
       }
       return QicDbUtil.updateQicDB(sql.replace("#tableName#", tableName), strUUID);
   }

    public static F.T4<IndicatorDto, IndicatorDto, QiaIndicatorDto, QiaIndicatorDto> getIndicator(long stid,int enginetypeId){
        //绩效指标
        IndicatorDto indicator = new IndicatorDto();
        IndicatorDto indicatorhis = new IndicatorDto();
        //ＱＩＡ的绩效指标
        QiaIndicatorDto qiaIndicatorDto = new QiaIndicatorDto();
        QiaIndicatorDto qiaIndicatorDtohis = new QiaIndicatorDto();
        switch (enginetypeId){
            case StrategyDto.QICORE_ENGINEE_ID://QICore的绩效指标
                indicator= getindicator(stid, 2);
                indicatorhis= getindicator(stid, 1);
                break;
            case StrategyDto.QIA_ENGINEE_ID://QIA的绩效指标
                qiaIndicatorDto=  getQiaIndicatorDto(stid, 2);
                qiaIndicatorDtohis=  getQiaIndicatorDto(stid, 1);
                break;
            default:
        }
        return F.T4(indicator, indicatorhis, qiaIndicatorDto, qiaIndicatorDtohis);
    }


    public static Integer judgeStrategyIsOut30(long uid){
        String sqlList = SqlLoader.getSqlById("StrategySql");
        sqlList +=" and status in (?,?) and sb.stup_uid="+uid+" ";
        sqlList+=" GROUP BY id ";
        StringBuilder coutSql = new StringBuilder("select count(*) from (\n" + sqlList + "\n) distTable  \n");
        Long total = QicDbUtil.queryQicDbCount(coutSql.toString(),StrategyDto.StrategyStatus.UPSHELF.value,StrategyDto.StrategyStatus.WAITINGUPSHELF.value);
        int num =total.intValue();
        return num;
    }
}
